'''

控制流仅仅起到了一个组织语句的作用,并不实施处理


'''

'''
def calSum(n): # 赋值语句数量T(n) = 1+n
    theSum = 0 # 执行了l次 (这里是1)
    for i in range(1,n+1): # 问题规模n次
        theSum += i  #  执行了l次
    return theSum

print(calSum(4))

'''


'''

问题规模:影响算法执行时间的主要因素

算法分析的目标 => 就是找出问题规模会怎么影响一个算法的运行时间

'''

'''
数量级函数(Order of Magnitude): 
    - 基本操作函数T(n)的精确值不是特别重要,重要的是T(n)起决定因素的主导部分
    - 数量级函数描述了T(n)中随着n增加而增加速度最快的主导部分
    - 用 '大O' 记做 O(f(n)),其中f(n)表示T(n)中的主导部分


比如说: 上文中的T(n) = 1+n => 当中的1就显得越来越不重要

'''

'''
T(n) = 542n + 34242342的大O数量级是 n
'''

'''
- 有时决定运行时间的不仅是问题规模
    - 某些具体数据也会影响算法运行时间分为最好、最差和平均情况，平均状况体现了算法的主流性能
    - 对算法的分析要看主流，而不被某几种特定的运行状况所迷惑
'''


a = 5
b = 10
c = 10
for i in range(n):
    for j int range(n):
        x = i*j
        y = j*j
        z =i*j
    
    for k in range(n):
        w = a*k+43
        v = b*b
d = 33

'''
以上分析: 大O = 3 + 3n^2 + 2n +1  = 3n^2 +2n+4 = n^2
- 最后的结果 == n^2
'''

