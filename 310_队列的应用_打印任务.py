
class Queue():
    def __init__(self):
        self.items = []
    def isEmply(self):
        return self.items == []
    def enqueue(self,item):
        self.items.insert(0,item)
    def dequeue(self):
        self.items.pop()
    def size(self):
        return len(self.items)

'''
- 一个具体的实例配置如下：
    - 一个实验室，在任意的一个小时内，大约有10名学生在场，这一小时中，每人会发起2次左右的打印，每次1～20页


- 打印机的性能是
    - 以草稿模式打印的话，每分钟10页，以正常模式打印的话，打印质量好，但速度下降为每分钟5页。


- 问题是： 怎么设定打印机的模式，让大家都不会等太久的前提下尽量提高打印质量？
    - 这是一个典型的决策支持问题，但无法通过规则直接计算
    - 我们要用一段程序来模拟这种打印任务场景，然后对程序运行结果进行分析，以支持对打印机模式设定的决策。


- 对问题进行建模
    -   对象：打印任务、打印队列、打印机
        打印任务的属性：提交时间、打印页数
        打印队列的属性：具有FIFO性质的打印任务队列
        打印机的属性：打印速度、是否忙

- 过程：生成和提交打印任务
    确定生成概率：实例为每小时会有10个学生提交的20个作业，这样，概率是每180秒会有1个作业生成并提交，概率为每秒1/180。
    确定打印页数：实例是1～20页，那么就是1～20页之间概率相同。

- 过程：实施打印
    - 当前的打印作业：正在打印的作业打印结束倒计时：新作业开始打印时开始倒计时，回0表示打印完毕，可以处理下一个作业

- 模拟时间：
    - 统一的时间框架：以最小单位（秒）均匀流逝的时间，设定结束时间
    - 同步所有过程：在一个时间单位里，对生成打印任务和实施打印两个过程各处理一次


'''